#pragma kernel InitInidrect
#pragma kernel GenerateGrassBlade

#include "ShaderLibrary/GrassInstanceData.cs.hlsl"
#include "ShaderLibrary/HaltonSequence.hlsl"
#include "ShaderLibrary/HashFunction.hlsl"

RWBuffer<uint> RWIndirectArgsBuffer;
RWStructuredBuffer<GrassInstanceData> RWGrassInstanceDataBuffer;

uint _DispatchRowCount;
float _JitterScale;
float _PatchSize;

[numthreads(1,1,1)]
void InitInidrect(uint3 id : SV_DispatchThreadID)
{
    RWIndirectArgsBuffer[1] = 0;
}

[numthreads(8,8,1)]
void GenerateGrassBlade(uint3 id : SV_DISPATCHTHREADID)
{    
    uint index;
    InterlockedAdd(RWIndirectArgsBuffer[1], 1, index);

    float2 offset = (HaltonSeq_64(id.x, id.y) * 2 - 1) * _JitterScale;
    float2 pos = float2(id.x,id.y) /  _DispatchRowCount * _PatchSize;
    float hash = hash21(pos);
    
    float randomno =  frac(sin(dot(pos, float2(12.9898, 78.233)))*43758.5453);
    
    pos += (HaltonSeq64[floor(randomno *64)] * 2 - 1) * _JitterScale;

    //float2 pos = offset;
    
    GrassInstanceData data;
    data.position = float3(pos.x, 0, pos.y);
    data.hash = hash;
    
    RWGrassInstanceDataBuffer[index] = data;
}
